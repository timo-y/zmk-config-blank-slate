/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#include "../ger_symbols.h"

#define QWERTY_BASE 1
#define TBLE_MIT 1

#define NAV_L 1
#define NUM_L 2
#define SYM_L 3

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };

#define BT(n) BT_SEL n

/ {
    chosen {
        zmk,physical-layout = &layout_ortho_4x12_1x2u;
    };

    macros {
        ZMK_MACRO(thumbs_up,
            wait-ms = <1>;
            tap-ms = <5>;
            bindings = <&kp PLUS &kp COLON &kp PLUS &kp N1 &kp COLON &kp RET>;
        )
    };
    
    tap_dances {
        shifty: shift_caps_word {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SHIFTY";
            #binding-cells = <0>;
            tapping-term-ms = <150>;
            bindings = <&kp LSHFT>, <&caps_word>;
        };
    };

    cond_layers {
        compatible = "zmk,conditional-layers";
        tri {
            if-layers = <NUM_L NAV_L>;
            then-layer = <SYM_L>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "Base";
            bindings = <
                &kp ESC    &kp Q      &kp W      &kp E       &kp R       &kp T      &kp DE_Z   &kp U       &kp I      &kp O      &kp P      &kp BKSP
                &kp TAB    &kp A      &kp S      &kp D       &kp F       &kp G      &kp H      &kp J       &kp K      &kp L      &kp DE_SS  &kp DE_HASH
                &kp LSHFT  &kp DE_Y   &kp X      &kp C       &kp V       &kp B      &kp N      &kp M       &kp COMMA  &kp DOT    &kp FSLH   &kp RET
                &kp LCTRL  &kp LGUI   &kp LALT   &mo SYM_L   &mo NAV_L       &kp SPACE         &mo NUM_L  &kp LEFT    &kp DOWN   &kp UP     &kp RIGHT
            >;
        };

        nav_layer {
            label = "Nav";
            bindings = <
                &bt BT_CLR &none      &none      &none       &none      &none      &none       &kp DE_UE  &none       &kp DE_OE  &none      &kp DEL
                &trans     &kp DE_AE  &none      &none       &none      &none      &none       &kp LEFT   &kp DOWN    &kp UP     &kp RIGHT  &none
                &trans     &bt BT(0)  &bt BT(1)  &bt BT(2)   &bt BT(3)  &bt BT(4)  &none       &kp HOME   &kp PG_DN   &kp PG_UP  &kp END    &none
                &trans     &trans     &trans     &trans      &trans           &trans           &trans     &trans      &trans     &trans     &trans
            >;
        };

        num_layer {
            label = "Num";
            bindings = <
                &trans     &kp DE_LPRN  &none    &none       &none        &kp DE_RPRN  &kp C_PREV  &kp N7     &kp N8     &kp N9  &none    &trans
                &trans     &kp DE_MINUS &none    &none       &kp DE_PLUS  &kp DE_EQL   &kp C_NEXT  &kp N4     &kp N5     &kp N6  &none    &trans
                &trans     &kp DE_CARET &none    &none       &kp DE_ASTR  &kp DE_BSLS  &kp N0      &kp N1     &kp N2     &kp N3  &none    &trans
                &trans     &trans       &trans   &trans      &trans                &trans          &trans     &trans     &trans  &trans   &trans
            >;
        };

        sym_layer {
            label = "Sym";
            bindings = <
                &trans   &kp DE_AT     &none        &kp DE_EURO  &none       &none        &kp DE_LCBR  &kp DE_RCBR  &kp DE_LBRC  &kp DE_RBRC  &none        &trans
                &trans   &kp DE_CARET  &kp DE_EXLM  &kp DE_DQUO  &kp DE_DLR  &kp DE_PERC  &kp DE_AMPR  &kp DE_SLSH  &kp DE_LPRN  &kp DE_RPRN  &kp DE_EQL   &kp DE_QUES
                &trans   &kp DE_BSLS   &kp DE_PIPE  &kp DE_QUOT  &kp DE_DEG  &kp DE_ASTR  &kp DE_LT    &kp DE_GT    &kp DE_PLUS  &kp DE_TILD  &kp DE_UNDS  &trans
                &trans   &trans        &trans       &trans       &trans              &trans            &trans       &trans       &trans       &trans       &trans
            >;
        };
    };
};
